// пример вертексный и пиксельный шейдер, причем пиксели еще смешиваются с фонгом

Scene {
  id: scen
  showLights: true

  Param {
    id: qParam
    title: "q"; min: 2; max: 15
  }

  Tetras {
    color: [1,0,1]
    positions: [ 0,0,0, 1,0,0,  0,qParam.value/10,0, 0,0,1];

    shader: p1
    opacity: 0.99 // вынуждает включать режим прозрачности у материала
  }

/* from https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/
* Uniforms are sent to both vertex shaders and fragment shaders and contain values that stay the same across the entire frame being rendered. A good example of this might be a light’s position.
* Attributes are values that are applied to individual vertices. Attributes are only available to the vertex shader. This could be something like each vertex having a distinct colour. Attributes have a one-to-one relationship with vertices.
* Varyings are variables declared in the vertex shader that we want to share with the fragment shader. To do this we make sure we declare a varying variable of the same type and name in both the vertex shader and the fragment shader. A classic use of this would be a vertex’s normal since this can be used in the lighting calculations.
*/    

  Param {
    id: pCustom1
    text: "custom 1"
    min: 0
    max: 500
    value: 200
  }  
 
  Shader {
      id: p1

      property real time: scen.sceneTime
      property real custom1: pCustom1.value / 100
      property real custom2: 1
			
      vertex: "
          // your things
          uniform float time;
          uniform float custom1;
          uniform float custom2;

			void main()
			{
			  float zz = gl_Position.z * sin(time*custom2) * custom1;
			  gl_Position.z = zz; 
			  // = vec4(position.x + sin(time), position.y + cos(time * custom1), zz, 1.0);
			}			
	   "
	   
	   fragmentOver: true // режим смешения с базовым цветом

	   fragment: "
      uniform float time;	   
			void main()
			{
			  // в режиме fragmentOver у нас уже есть вычисленный gl_FragColor 
			  //gl_FragColor = vec4( sin(time) * abs(cos(gl_FragCoord.x/15.0)), abs( sin(gl_FragCoord.y) ),0,1.0);
			  gl_FragColor.a = sin(time) * sin(time) * abs(cos(gl_FragCoord.x/15.0));
	    }
	   "
	   
    }
  
  
}
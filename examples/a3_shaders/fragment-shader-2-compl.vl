// пример пиксельный шейдер

// also https://people.math.osu.edu/fowler.291/phase/
// https://www-m10.ma.tum.de/foswiki/pub/Lehrstuhl/StefanKranich/master-thesis.pdf
// http://www.cond-mat.de/teaching/JSC/GSP12/JSC-GSP12_report.pdf
// https://en.wikipedia.org/wiki/Sine#Sine_with_a_complex_argument

Scene {
  id: scen
  Param {
    id: qParam
    title: "q"; min: 2; max: 15
  }

  Param {
    id: pShine
    title: "shine"; min: 0; max: 500; value: 200
  }  
 
  property var funcs: [ 
  "z = c_sin(z);",
  "z = c_tan(z);",
  "z = c_div( vec2(1,0),z );",
  "z = c_mul( z,c_add( z, vec2(1,0) ) );",
  "z = c_mul( z,vec2(10,10) );",  
  "z = c_log(z);",
  "z = c_div( vec2(1,0), c_log(z) );",
  "z = c_div( c_log(z), c_sin(z) );",
  "z = c_div( vec2(1,0), c_sin(z) );",

  "new"
  ]

  ComboBoxParam {
    id: pFuncNum
    text: "Функция"
    values: funcs
    onValueChanged: if (pFuncNum.value < funcs.length-1) pFunc.value = funcs[ pFuncNum.value ];
  }
  
  TextParam {
    visible: pFuncNum.value >= funcs.length-1
    id: pFunc
    text: "Своя"
  }

  Tetras {
    color: [0,1,qParam.value/15]
    positions: [ 0,0,0, 1,0,0,  0,1,0, 0,0,qParam.value/10];
    
    shader: p1
  }

  Shader {
      id: p1
      
      property var resolution: [scen.width, scen.height]
      
//      fragmentOver: true

      fragment: fragmentt.replace("FUNC",pFunc.value);
      
      property var fragmentt: "
#ifndef COMPLEX      
#define COMPLEX

// https://en.wikipedia.org/wiki/Hyperbolic_function
#define sinh(x) ( exp(x) - exp(-x) )/2.0
#define cosh(x) ( exp(x) + exp(-x) )/2.0
#define atan2(x,y) atan(x,y)

// https://github.com/julesb/glsl-util/blob/master/complexvisual.glsl

#ifndef PI
#define PI 3.14159265      
#endif

//#define c_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)
//#define c_div(a, b) (c_mul(a , c_inv(b)))
#define c_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))
#define c_modulus(a) length(a)
#define c_conj(a) vec2(a.x,-a.y)
#define c_arg(a) atan2(a.y,a.x)
#define c_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))
#define c_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))
//#define c_tan c_div(c_sin(a), c_cos(a))

vec2 c_add(vec2 a, vec2 b) { return a+b;} // is redundant
vec2 c_sub(vec2 a, vec2 b) { return a-b;} // is redundant
vec2 c_mul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);}
//vec2 c_div(vec2 a, vec2 b) { return c_mul(a , c_inv(b));}
//float c_modulus(vec2 a) {return sqrt(a.x*a.x+a.y*a.y);}
//float c_modulus(vec2 a) {return length(a); }
//float c_arg(vec2 a) {return atan2(a.y,a.x);}

vec2 c_sqrt(vec2 a) {
    float r = sqrt(a.x*a.x+a.y*a.y);
    float rpart = sqrt(0.5*(r+a.x));
    float ipart = sqrt(0.5*(r-a.x));
    if (a.y < 0.0) ipart = -ipart;
    return vec2(rpart,ipart);
}

//vec2 c_sin(vec2 a) {return vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y));}
//vec2 c_cos(vec2 a) {return vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y));}
vec2 c_tan(vec2 a) {return c_div(c_sin(a), c_cos(a)); }

vec2 c_log(vec2 a) {
    float rpart = sqrt((a.x*a.x)+(a.y*a.y));
    float ipart = atan2(a.y,a.x);
    if (ipart > PI) ipart=ipart-(2.0*PI);
    return vec2(log(rpart),ipart);
}

vec2 c_mobius(vec2 a) {
    vec2 c1 = a - vec2(1.0,0.0);
    vec2 c2 = a + vec2(1.0,0.0);
    return c_div(c1, c2);
}
vec2 c_z_plus_one_over_z(vec2 a) {
    return a + c_div(vec2(1.0,0.0), a);
    //return c_add(a, c_div(vec2(1.0,0.0), a));
}
vec2 c_z_squared_plus_c(vec2 z, vec2 c) {
    return c_mul(z, z) + c;
}

vec2 c_sin_of_one_over_z(vec2 z) {
    return c_sin(c_div(vec2(1.0,0.0), z));
}
#endif      

			uniform float sceneTime;
			uniform vec2 resolution;

			void main( void ) {
				//gl_FragColor=vec4( gl_FragCoord.x/500.0,gl_FragCoord.y/500.0,0,1.0);
				vec2 z = vec2( (gl_FragCoord.x/resolution.x -0.5)*2.0, (gl_FragCoord.y/resolution.y -0.5)*2.0 );
				// now ..-1..1
				z.x = z.x * 10.0;
				z.y = z.y * 10.0;				
				//z = c_mul( z, vec2(10,10) );
				//gl_FragColor=vec4( (gl_FragCoord.x/(resolution.x/1.0) - 0.5)*2.0, gl_FragCoord.y/(resolution.y/1.0),0,1.0);
				//gl_FragColor=vec4( (gl_FragCoord.x/(resolution.x/1.0) - 0.5)*2.0, 0,0,1.0);
				
				//z = c_mul( z,c_add( z, vec2(1,0) ) );
				//z = c_div( vec2(1,0), c_log(z) );
				//z = c_log(z);
				///// z = c_div( vec2(1,0), c_log(z) );

				FUNC
				
				//z = c_add( c_add( c_mul( z,z ), z ), vec2( 1,0) );

				//z = c_sin(z);
				//z = c_tan(z);
				
				gl_FragColor.z = c_modulus(z);
//				gl_FragColor.z = c_arg(z);
//				gl_FragColor.x = z.x;
//				gl_FragColor.y = z.y;
			}
			"
		}
  

}
// пример вертексный шейдер

Scene {
  id: scen
  showLights: true

  Param {
    id: qParam
    title: "q"; min: 2; max: 15
  }

  Tetras {
    color: [1,0,1]
    positions: [ 0,0,0, 1,0,0,  0,1,0, 0,0,qParam.value/10];

    shader: p1
  }

/* from https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/
* Uniforms are sent to both vertex shaders and fragment shaders and contain values that stay the same across the entire frame being rendered. A good example of this might be a light’s position.
* Attributes are values that are applied to individual vertices. Attributes are only available to the vertex shader. This could be something like each vertex having a distinct colour. Attributes have a one-to-one relationship with vertices.
* Varyings are variables declared in the vertex shader that we want to share with the fragment shader. To do this we make sure we declare a varying variable of the same type and name in both the vertex shader and the fragment shader. A classic use of this would be a vertex’s normal since this can be used in the lighting calculations.
*/    

  Param {
    id: pCustom1
    text: "custom 1"
    min: -1
    max: 1
    value: 0
    step: 0.1
  }  
 
  Shader {
      id: p1

      property real time: scen.sceneTime
      property real custom1: pCustom1.value
			
      vertex: "
          // your things
          uniform float time;
          uniform float custom1;
	        uniform float custom2;

			void main()
			{
          gl_Position = vec4(gl_Position.x, gl_Position.y * cos(time * custom1), gl_Position.z, 1.0);
			}			
	   "
	   
    }
  

}
import "."

/* Замысел в том, чтобы можно было вкладывать графики друг в друга ScatterPlot { ScatterPlot {...} }
   Но при этом они 1) Пришли к общему знаменателю по диапазону отображения, и 2) Делали приближение-удаление синхронно.

   Вопрос пункта 1 два варианта 
     - первый определяет, вложенные подстраиваются, и 
     - выстраивают максимум. Сделаем так.
*/
ScatterPlotBase {
   id: sp
   
   // головной график в дереве
   function findRoot() {
     var r = this;
     while (r.attach && r.attach.connectMouseHandlers)
       r = r.attach;
     return r;
   }
   property var treeSize: 0 // общий размер наросшего дерева, высчитывается только в головном графике

   property var subscribers: [] // дети в поддереве графиков
   
   // родительский график
   property var attach: parent && parent.connectMouseHandlers ? parent : null
   
   // если мы дите - то идем без фона
   opaque: attach ? true : false;

   onSelectionChanged: {
     if (attach)
       setSel( attach, selection );
     subscribers.map( function(s) { setSel( s, selection ); } );
   }
   
   function setSel( tgt, sel )
   {
     for (var i=0; i<4; i++)
       if (tgt.selection[i] != sel[i])
         {
           tgt.selection = sel;
           return;
         }
   }

   property var mousePosX
   property var mousePosY

//   function sendMouse

   function mouseHandler(event,cookie) {
     // это есть условие непрохождения повторных вызовов!
     if (event.offsetX == mousePosX && event.offsetY == mousePosY) return;

     mousePosX = event.offsetX;
     mousePosY = event.offsetY;

     // tell to parental graph
     if (attach) attach.chart.mouseMoveHandler(event);     
     
     // tell to children graphs
     subscribers.map( function(s) { s.chart.mouseMoveHandler(event); } );
   }
   
   // so after our move, we tell to parent and childs... and this is O(Q)
   function connectMouseHandlers() {
     chart.nextMouseMoveHandler = mouseHandler;
   }
   
   
   property bool attachedToTree: false
   Component.onCompleted: {
     
     if (attach) {
       attachedToTree = true;
       attach.subscribers.push( sp );
       //console.log( "findRoot().treeSize = ",findRoot().treeSize );
       findRoot().treeSize = findRoot().treeSize+1;
       sp.z = findRoot().treeSize;
       sp.shift = sp.z*20;
       //console.log("sp.z=",sp.z );
       
       // ех... selection то у него еще не создано, не вычислено.. attach.selection.changed.connect( attachChangedSel );
     }
   }
   
   Component.onDestruction: {
//     console.log("!!!!!!!!!!! scatter destruct. attach=",attach );
     if (attach && attachedToTree) {
//       debugger;
//       console.log("decreasing tree size.. before that, findRoot().treeSize=",findRoot().treeSize);
       findRoot().treeSize = findRoot().treeSize-1;
       for (var i=0; i<attach.subscribers.length; i++)
         if (attach.subscribers[i] == sp) {
           attach.subscribers.splice( i,1 );
           break;
         }
     }
   }
   
   property var rminmax: [0,0,0,0] // устанавливаемые пользователем значения 
   // но наша система графиков может делать реальный диапазон и побольше, если вдруг все графики не влазиют
   // окончательное значение пишется в assignedMinmax

   // Данный график по рисуемому диапазону независим от остального дерева
   property bool independentFromTree: false

   function maximizeTo( from, to ) {
       var flag = false;

       if (to[0] < from[0] || isNaN(from[0])) { from[0] = to[0]; flag = true; };
       if (to[1] > from[1] || isNaN(from[1])) { from[1] = to[1]; flag = true; };
       if (to[2] < from[2] || isNaN(from[2])) { from[2] = to[2]; flag = true; };
       if (to[3] > from[3] || isNaN(from[3])) { from[3] = to[3]; flag = true; };

       return flag;
   }

   function eq( p,q ) { 
       if (p[0] === q[0] && p[1] === q[1] && p[2] === q[2] && p[3] === q[3]) return true;
       return false;
   }
   
   function getMySubtreeMinmax() {
     var p = dataMinmax ? dataMinmax.slice(0) : [0,0,0,0];
     
     maximizeTo( p, rminmax );

     for (var i=0; i<subscribers.length; i++ ) {
       if (subscribers[i].independentFromTree) continue;

       var q = subscribers[i].getMySubtreeMinmax();
       maximizeTo( p, q );
       console.log("p maxI =",p, "i=",i)
     }
     return p;
   }

   function setMinmaxToSubtree( newvalue ) {
     assignedMinmax = newvalue;
     if (!attach) chart.reset();
     
     for (var i=0; i<subscribers.length; i++ ) {
       if (subscribers[i].independentFromTree) continue;
       subscribers[i].setMinmaxToSubtree( newvalue );
     }
   }
   
   function updateTreeMinmax() {
     console.log( "updateTreeMinmax called, chart.dataMinMax=",chart.dataMinMax);

     if (independentFromTree) {
        chart.independentFromTree = true;
        return;
     }
   
     if (attach) 
        return attach.updateTreeMinmax();
        
     // only in head node
     if (!chart) return;
     var p = getMySubtreeMinmax();
     
     setMinmaxToSubtree( p );
   }

   onDataMinmaxChanged: {
     updateTreeMinmax();    
   }
   
   onInited: {
     connectMouseHandlers();
     
     // еххма ручками на всяк случай
     if (findRoot() === this) {
       chart.computeMinMax();
       chart.reset();
     }
   }
}
